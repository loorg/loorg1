"""
Задание 3.
Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
Задание творческое. Здесь нет жестких требований к выполнению.
"""



pro_dict = {'сталкер': 2000, 'свет': 5000, 'воронка': 1000, 'жар': 400, 'AK': 4500, 'мельница': 3000}


def max_1(use_dict):
    
                                                                #Сложность: O(N*logN)
    
    sorted_keys = sorted(use_dict, key=use_dict.__getitem__, reverse=True)  # O(N*logN)
    max_pro_dict = {}                                           # O(1)
    for n in range(0, 5):                                       # O(1) - 
        key = sorted_keys[n]                                    # O(1)
        value = use_dict[key]                                   # O(1)
        max_pro_dict.update({key: value})                       # O(1) 
    print(max_pro_dict)                                         # O(1)


def max_2(use_dict):
    """
    Сложность: O(N)
    """
    temp = dict.copy(use_dict)                       # O(N)
    max_pro_dict = {}                                # O(1)
    max_key = 0                                      # O(1)
    for i in range(1, 5):                            # O(1) 
        max_value = 0                                # O(1)
        for key in temp:                             # O(N) 
            if temp[key] > max_value:                # O(1) 
                max_key = key                        # O(1)
                max_value = temp[key]                # O(1)
        max_pro_dict.update({max_key: max_value})    # O(1)
        temp.pop(max_key)                            # O(N) 
    print(max_pro_dict)                              # O(1)


max_1(pro_dict)
max_2(pro_dict)
